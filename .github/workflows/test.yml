name: Protobuf Buck2 Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Buck2 configuration
  BUCK2_VERSION: "latest"
  # Performance test thresholds
  MAX_PROTO_COMPILE_TIME_MS: 10000
  MAX_MEMORY_USAGE_MB: 100

jobs:
  # Pre-flight checks
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy

      - name: Check Python formatting
        run: |
          black --check test/
          isort --check-only test/

      - name: Lint Python code
        run: |
          flake8 test/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type check Python code
        run: |
          mypy test/ --ignore-missing-imports

      - name: Validate proto files
        run: |
          # Install protoc if available
          if command -v protoc &> /dev/null; then
            find test/fixtures -name "*.proto" -exec protoc --descriptor_set_out=/dev/null {} \;
          else
            echo "protoc not available, skipping proto validation"
          fi

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for efficiency
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Buck2
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            curl -LO https://github.com/facebook/buck2/releases/latest/download/buck2-x86_64-unknown-linux-musl.zst
            zstd -d buck2-x86_64-unknown-linux-musl.zst
            chmod +x buck2-x86_64-unknown-linux-musl
            sudo mv buck2-x86_64-unknown-linux-musl /usr/local/bin/buck2
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            curl -LO https://github.com/facebook/buck2/releases/latest/download/buck2-x86_64-apple-darwin.zst
            zstd -d buck2-x86_64-apple-darwin.zst
            chmod +x buck2-x86_64-apple-darwin
            sudo mv buck2-x86_64-apple-darwin /usr/local/bin/buck2
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            curl -LO https://github.com/facebook/buck2/releases/latest/download/buck2-x86_64-pc-windows-msvc.exe
            mkdir -p /usr/local/bin
            mv buck2-x86_64-pc-windows-msvc.exe /usr/local/bin/buck2.exe
          fi
        shell: bash

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Buck2 installation
        run: buck2 --version

      - name: Run Python unit tests
        run: |
          cd test
          python -m pytest rules/proto_utils_test.py -v
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Run Buck2 rule tests
        run: |
          # Test basic proto compilation
          buck2 build //test/fixtures:simple_proto
          buck2 build //test/fixtures:complex_proto
          buck2 build //test/fixtures/basic:minimal_proto
          buck2 build //test/fixtures/basic:types_proto

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: [lint, unit-tests]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        # Skip Windows for integration tests due to complexity

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Buck2
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            curl -LO https://github.com/facebook/buck2/releases/latest/download/buck2-x86_64-unknown-linux-musl.zst
            zstd -d buck2-x86_64-unknown-linux-musl.zst
            chmod +x buck2-x86_64-unknown-linux-musl
            sudo mv buck2-x86_64-unknown-linux-musl /usr/local/bin/buck2
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            curl -LO https://github.com/facebook/buck2/releases/latest/download/buck2-x86_64-apple-darwin.zst
            zstd -d buck2-x86_64-apple-darwin.zst
            chmod +x buck2-x86_64-apple-darwin
            sudo mv buck2-x86_64-apple-darwin /usr/local/bin/buck2
          fi
        shell: bash

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests
        run: |
          chmod +x test/integration/test_workflows.sh
          test/integration/test_workflows.sh
        timeout-minutes: 15

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.os }}
          path: buck-out/test-workspace/
          retention-days: 7

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Buck2
        run: |
          curl -LO https://github.com/facebook/buck2/releases/latest/download/buck2-x86_64-unknown-linux-musl.zst
          zstd -d buck2-x86_64-unknown-linux-musl.zst
          chmod +x buck2-x86_64-unknown-linux-musl
          sudo mv buck2-x86_64-unknown-linux-musl /usr/local/bin/buck2

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run performance benchmarks
        run: |
          chmod +x test/integration/test_workflows.sh
          test/integration/test_workflows.sh benchmark
        timeout-minutes: 10

      - name: Check performance regressions
        run: |
          echo "Performance regression check completed"
          # TODO: Implement performance regression detection
          # Compare with baseline performance metrics

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            buck-out/log/
            buck-out/test-workspace/
          retention-days: 30

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Coverage report
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install coverage pytest

      - name: Run tests with coverage
        run: |
          cd test
          coverage run -m pytest rules/proto_utils_test.py
          coverage report
          coverage html
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: test/htmlcov/
          retention-days: 30

      - name: Coverage comment
        if: github.event_name == 'pull_request'
        run: |
          echo "Coverage report generated - check artifacts"

  # Final status check
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Test Summary:"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- Security: ${{ needs.security.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed"
          fi

      - name: Create test report
        if: always()
        run: |
          cat > test-summary.md << 'EOF'
          # Test Summary
          
          ## Results
          - **Lint**: ${{ needs.lint.result }}
          - **Unit Tests**: ${{ needs.unit-tests.result }}
          - **Integration Tests**: ${{ needs.integration-tests.result }}
          - **Security Scan**: ${{ needs.security.result }}
          
          ## Workflow Details
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Run ID**: ${{ github.run_id }}
          
          EOF

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 90
