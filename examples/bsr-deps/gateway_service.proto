syntax = "proto3";

package example.gateway.v1;

import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/example/gateway/v1";

// Gateway service demonstrating grpc-gateway integration
service GatewayService {
  // Health check endpoint
  rpc Health(google.protobuf.Empty) returns (HealthResponse) {
    option (google.api.http) = {
      get: "/health"
    };
  }
  
  // Get service status with detailed information
  rpc GetStatus(StatusRequest) returns (StatusResponse) {
    option (google.api.http) = {
      get: "/v1/status"
    };
  }
  
  // Update service configuration
  rpc UpdateConfig(UpdateConfigRequest) returns (ConfigResponse) {
    option (google.api.http) = {
      put: "/v1/config"
      body: "config"
    };
  }
  
  // Stream events (WebSocket-compatible via grpc-gateway)
  rpc StreamEvents(StreamEventsRequest) returns (stream Event) {
    option (google.api.http) = {
      get: "/v1/events/stream"
    };
  }
}

message HealthResponse {
  string status = 1;
  google.protobuf.Timestamp timestamp = 2;
  string version = 3;
}

message StatusRequest {
  bool include_metrics = 1;
}

message StatusResponse {
  string service_name = 1;
  string status = 2;
  google.protobuf.Timestamp uptime = 3;
  map<string, string> metrics = 4;
  repeated string active_connections = 5;
}

message UpdateConfigRequest {
  ServiceConfig config = 1;
}

message ServiceConfig {
  int32 max_connections = 1;
  int32 timeout_seconds = 2;
  bool debug_mode = 3;
  repeated string allowed_origins = 4;
}

message ConfigResponse {
  ServiceConfig config = 1;
  string updated_by = 2;
  google.protobuf.Timestamp updated_at = 3;
}

message StreamEventsRequest {
  repeated string event_types = 1;
  string client_id = 2;
}

message Event {
  string event_id = 1;
  string event_type = 2;
  google.protobuf.Timestamp timestamp = 3;
  map<string, string> data = 4;
}
