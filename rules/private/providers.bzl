"""Provider definitions for protobuf Buck2 integration.

This module defines the providers used to pass information between protobuf
rules. Implementation will be completed in Task 002.
"""

# ProtoInfo provider - will be fully implemented in Task 002
ProtoInfo = provider(fields = [
    "descriptor_set",        # Compiled protobuf descriptor set
    "proto_files",          # Source .proto files
    "import_paths",         # Import paths for this library
    "transitive_descriptor_sets",  # All descriptor sets from deps
    "transitive_proto_files",      # All proto files from deps
    "transitive_import_paths",     # All import paths from deps
    "go_package",           # Go package path (if specified)
    "python_package",       # Python package path (if specified)
    "java_package",         # Java package path (if specified)
    "lint_report",          # Lint validation report
    "breaking_report",      # Breaking change report
])

# LanguageProtoInfo provider - will be implemented across language tasks
LanguageProtoInfo = provider(fields = [
    "language",             # Target language ("go", "python", etc.)
    "generated_files",      # Generated source files
    "package_name",         # Language-specific package name
    "dependencies",         # Language-specific dependencies
    "compiler_flags",       # Language-specific compiler flags
])

# ProtoBundleInfo provider - information about multi-language bundles
ProtoBundleInfo = provider(fields = [
    "bundle_name",          # Name of the bundle
    "proto_target",         # Original proto_library target
    "language_targets",     # Dictionary of language -> target info
    "generated_languages",  # List of languages that were generated
    "consistency_report",   # Cross-language consistency validation report
    "bundle_config",        # Bundle configuration used
])

# GrpcServiceInfo provider - advanced gRPC service information
GrpcServiceInfo = provider(fields = [
    "service_name",         # Name of the gRPC service
    "proto_target",         # Proto library containing service definitions
    "languages",            # List of target languages
    "plugins",              # Dictionary of enabled plugins and their config
    "gateway_files",        # gRPC-Gateway generated files (if enabled)
    "openapi_files",        # OpenAPI/Swagger files (if enabled)
    "validation_files",     # Validation plugin files (if enabled)
    "mock_files",           # Mock implementation files (if enabled)
    "service_config",       # Service-specific configuration
])

# PluginInfo provider - information about plugin execution
PluginInfo = provider(fields = [
    "plugin_name",          # Name of the plugin
    "target_language",      # Language this plugin targets
    "generated_files",      # Files generated by this plugin
    "dependencies",         # Additional dependencies required
    "metadata",             # Plugin-specific metadata
])

# ConsistencyReport provider - cross-language validation results
ConsistencyReport = provider(fields = [
    "bundle_name",          # Bundle being validated
    "languages",            # Languages included in validation
    "api_consistency",      # API surface consistency results
    "naming_consistency",   # Naming convention consistency results
    "type_compatibility",   # Type compatibility results
    "validation_errors",    # List of validation errors found
    "validation_warnings",  # List of validation warnings
    "is_valid",             # Boolean indicating if validation passed
])

# ValidationInfo provider - protobuf validation and linting results
ValidationInfo = provider(fields = [
    "passed",               # Boolean indicating if all validation passed
    "lint_result",          # Result file from linting (buf lint output)
    "breaking_result",      # Result file from breaking change detection
    "custom_results",       # List of custom validation rule results
    "report",               # Comprehensive validation report file
    "error_count",          # Number of validation errors found
    "warning_count",        # Number of validation warnings found
    "linter_used",          # Name of linter used (e.g., "buf")
])

# ValidationRuleInfo provider - custom validation rule information
ValidationRuleInfo = provider(fields = [
    "script",               # Executable script that implements the rule
    "error_message",        # Error message to display on rule failure
    "severity",             # Severity level (error, warning, info)
    "rule_name",            # Human-readable name of the rule
    "description",          # Description of what the rule validates
])

# CacheKeyInfo provider - cache key information for optimized builds
CacheKeyInfo = provider(fields = [
    "base_cache_key",       # Base cache key for proto compilation
    "language_cache_keys",  # Dictionary of language -> cache key
    "tool_versions_hash",   # Hash of tool versions used
    "proto_content_hash",   # Hash of proto file contents
    "dependency_hash",      # Hash of transitive dependencies
    "rule_version_hash",    # Hash of rule implementation version
    "generation_time",      # Timestamp when cache key was generated
])

# CacheMetricsInfo provider - cache performance metrics
CacheMetricsInfo = provider(fields = [
    "cache_hit_rate",       # Percentage of cache hits vs total lookups
    "cache_miss_rate",      # Percentage of cache misses vs total lookups
    "total_lookups",        # Total number of cache lookups performed
    "average_hit_time_ms",  # Average time for successful cache retrieval
    "average_miss_time_ms", # Average time for cache miss + generation
    "cache_size_mb",        # Current cache size in megabytes
    "eviction_count",       # Number of cache entries evicted
    "last_updated",         # Timestamp of last metrics update
])

# CacheConfigInfo provider - caching configuration and settings
CacheConfigInfo = provider(fields = [
    "hash_inputs",          # Whether to hash input files for cache keys
    "hash_tools",           # Whether to hash tool versions for cache keys
    "language_isolation",   # Whether to use separate cache keys per language
    "version_isolation",    # Whether to isolate cache by rule version
    "local_cache_enabled",  # Whether local caching is enabled
    "remote_cache_enabled", # Whether remote caching is enabled
    "cache_size_limit_mb",  # Maximum cache size in megabytes
    "ttl_hours",           # Time-to-live for cache entries in hours
    "invalidate_on_rule_change", # Whether to invalidate on rule changes
    "compression_enabled",  # Whether to compress cached artifacts
    "cache_storage_path",   # Path for local cache storage
])

# CacheStorageInfo provider - information about cached artifacts
CacheStorageInfo = provider(fields = [
    "cache_key",           # Cache key for these artifacts
    "language",            # Target language for these artifacts
    "artifacts",           # List of cached artifact files
    "metadata",            # Cache metadata (timestamps, sizes, etc.)
    "storage_path",        # Path where artifacts are stored
    "compression_used",    # Whether artifacts are compressed
    "creation_time",       # When cache entry was created
    "last_accessed",       # When cache entry was last accessed
    "access_count",        # Number of times cache entry was accessed
])

# CacheValidationInfo provider - cache validation and integrity information
CacheValidationInfo = provider(fields = [
    "is_valid",            # Whether cached artifacts are valid
    "validation_errors",   # List of validation errors found
    "checksum_verified",   # Whether artifact checksums are valid
    "dependency_check",    # Whether dependencies are consistent
    "tool_version_check",  # Whether tool versions match
    "expiry_check",        # Whether cache entry has not expired
    "corruption_detected", # Whether any corruption was detected
])
