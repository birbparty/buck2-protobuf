"""Provider definitions for protobuf Buck2 integration.

This module defines the providers used to pass information between protobuf
rules. Implementation will be completed in Task 002.
"""

# BSRRepositoryInfo provider - information about configured BSR repositories
BSRRepositoryInfo = provider(
    doc = "Information about a BSR repository configuration",
    fields = {
        "repository": "BSR repository reference (e.g., buf.build/myorg/private-schemas)",
        "auth_method": "Authentication method for this repository",
        "teams": "List of teams with access to this repository",
        "access_level": "Access level for the repository (read/write/admin)",
        "service_account_file": "Path to service account key file (optional)",
        "cache_ttl": "Cache time-to-live in seconds",
        "config_file": "Repository configuration file",
        "is_private": "Whether this is a private repository",
    }
)

BSRPublishInfo = provider(
    doc = "Information about a BSR publishing configuration",
    fields = {
        "proto": "Proto library target to publish",
        "repositories": "Dictionary of repository configurations",
        "config_file": "Publishing configuration file",
        "publishing_script": "Generated publishing script",
        "version_strategy": "Versioning strategy (semantic/manual/git_tag)",
        "breaking_change_policy": "Breaking change policy (allow/require_approval/block)",
        "notify_teams": "Teams to notify on publication",
    }
)

# ProtoInfo provider - will be fully implemented in Task 002
ProtoInfo = provider(fields = [
    "descriptor_set",        # Compiled protobuf descriptor set
    "proto_files",          # Source .proto files
    "import_paths",         # Import paths for this library
    "transitive_descriptor_sets",  # All descriptor sets from deps
    "transitive_proto_files",      # All proto files from deps
    "transitive_import_paths",     # All import paths from deps
    "go_package",           # Go package path (if specified)
    "python_package",       # Python package path (if specified)
    "java_package",         # Java package path (if specified)
    "lint_report",          # Lint validation report
    "breaking_report",      # Breaking change report
])

# LanguageProtoInfo provider - will be implemented across language tasks
LanguageProtoInfo = provider(fields = [
    "language",             # Target language ("go", "python", etc.)
    "generated_files",      # Generated source files
    "package_name",         # Language-specific package name
    "dependencies",         # Language-specific dependencies
    "compiler_flags",       # Language-specific compiler flags
])

# ProtoBundleInfo provider - information about multi-language bundles
ProtoBundleInfo = provider(fields = [
    "bundle_name",          # Name of the bundle
    "proto_target",         # Original proto_library target
    "language_targets",     # Dictionary of language -> target info
    "generated_languages",  # List of languages that were generated
    "consistency_report",   # Cross-language consistency validation report
    "bundle_config",        # Bundle configuration used
])

# GrpcServiceInfo provider - advanced gRPC service information
GrpcServiceInfo = provider(fields = [
    "service_name",         # Name of the gRPC service
    "proto_target",         # Proto library containing service definitions
    "languages",            # List of target languages
    "plugins",              # Dictionary of enabled plugins and their config
    "gateway_files",        # gRPC-Gateway generated files (if enabled)
    "openapi_files",        # OpenAPI/Swagger files (if enabled)
    "validation_files",     # Validation plugin files (if enabled)
    "mock_files",           # Mock implementation files (if enabled)
    "service_config",       # Service-specific configuration
])

# PluginInfo provider - information about plugin execution
PluginInfo = provider(fields = [
    "plugin_name",          # Name of the plugin
    "target_language",      # Language this plugin targets
    "generated_files",      # Files generated by this plugin
    "dependencies",         # Additional dependencies required
    "metadata",             # Plugin-specific metadata
])

# ConsistencyReport provider - cross-language validation results
ConsistencyReport = provider(fields = [
    "bundle_name",          # Bundle being validated
    "languages",            # Languages included in validation
    "api_consistency",      # API surface consistency results
    "naming_consistency",   # Naming convention consistency results
    "type_compatibility",   # Type compatibility results
    "validation_errors",    # List of validation errors found
    "validation_warnings",  # List of validation warnings
    "is_valid",             # Boolean indicating if validation passed
])

# ValidationInfo provider - protobuf validation and linting results
ValidationInfo = provider(fields = [
    "passed",               # Boolean indicating if all validation passed
    "lint_result",          # Result file from linting (buf lint output)
    "breaking_result",      # Result file from breaking change detection
    "custom_results",       # List of custom validation rule results
    "report",               # Comprehensive validation report file
    "error_count",          # Number of validation errors found
    "warning_count",        # Number of validation warnings found
    "linter_used",          # Name of linter used (e.g., "buf")
])

# ValidationRuleInfo provider - custom validation rule information
ValidationRuleInfo = provider(fields = [
    "script",               # Executable script that implements the rule
    "error_message",        # Error message to display on rule failure
    "severity",             # Severity level (error, warning, info)
    "rule_name",            # Human-readable name of the rule
    "description",          # Description of what the rule validates
])

# ProtovalidateInfo provider - modern protovalidate validation information
ProtovalidateInfo = provider(fields = [
    "language",            # Target language (go, python, typescript)
    "runtime_config",      # Runtime configuration for protovalidate
    "validation_files",    # Generated validation files
    "schema_dir",          # buf/validate schema directory
    "version",             # Protovalidate library version used
    "cache_enabled",       # Whether BSR caching is enabled
])

# ConnectInfo provider - Connect framework information
ConnectInfo = provider(fields = [
    "language",            # Target language (go, typescript, etc.)
    "framework",           # Framework used (connect, connect-go, connect-es, etc.)
    "sources",             # Generated source files
    "proto_info",          # Original ProtoInfo from the proto target
    "grpc_compat",         # Whether gRPC compatibility is enabled
    "transport",           # Transport protocol for connect-es (grpc-web, etc.)
    "import_style",        # Import style for connect-es (module, commonjs)
    "frameworks",          # List of frameworks for multi-framework targets
    "framework_infos",     # List of framework-specific ConnectInfo objects
])

# CacheKeyInfo provider - cache key information for optimized builds
CacheKeyInfo = provider(fields = [
    "base_cache_key",       # Base cache key for proto compilation
    "language_cache_keys",  # Dictionary of language -> cache key
    "tool_versions_hash",   # Hash of tool versions used
    "proto_content_hash",   # Hash of proto file contents
    "dependency_hash",      # Hash of transitive dependencies
    "rule_version_hash",    # Hash of rule implementation version
    "generation_time",      # Timestamp when cache key was generated
])

# CacheMetricsInfo provider - cache performance metrics
CacheMetricsInfo = provider(fields = [
    "cache_hit_rate",       # Percentage of cache hits vs total lookups
    "cache_miss_rate",      # Percentage of cache misses vs total lookups
    "total_lookups",        # Total number of cache lookups performed
    "average_hit_time_ms",  # Average time for successful cache retrieval
    "average_miss_time_ms", # Average time for cache miss + generation
    "cache_size_mb",        # Current cache size in megabytes
    "eviction_count",       # Number of cache entries evicted
    "last_updated",         # Timestamp of last metrics update
])

# CacheConfigInfo provider - caching configuration and settings
CacheConfigInfo = provider(fields = [
    "hash_inputs",          # Whether to hash input files for cache keys
    "hash_tools",           # Whether to hash tool versions for cache keys
    "language_isolation",   # Whether to use separate cache keys per language
    "version_isolation",    # Whether to isolate cache by rule version
    "local_cache_enabled",  # Whether local caching is enabled
    "remote_cache_enabled", # Whether remote caching is enabled
    "cache_size_limit_mb",  # Maximum cache size in megabytes
    "ttl_hours",           # Time-to-live for cache entries in hours
    "invalidate_on_rule_change", # Whether to invalidate on rule changes
    "compression_enabled",  # Whether to compress cached artifacts
    "cache_storage_path",   # Path for local cache storage
])

# CacheStorageInfo provider - information about cached artifacts
CacheStorageInfo = provider(fields = [
    "cache_key",           # Cache key for these artifacts
    "language",            # Target language for these artifacts
    "artifacts",           # List of cached artifact files
    "metadata",            # Cache metadata (timestamps, sizes, etc.)
    "storage_path",        # Path where artifacts are stored
    "compression_used",    # Whether artifacts are compressed
    "creation_time",       # When cache entry was created
    "last_accessed",       # When cache entry was last accessed
    "access_count",        # Number of times cache entry was accessed
])

# CacheValidationInfo provider - cache validation and integrity information
CacheValidationInfo = provider(fields = [
    "is_valid",            # Whether cached artifacts are valid
    "validation_errors",   # List of validation errors found
    "checksum_verified",   # Whether artifact checksums are valid
    "dependency_check",    # Whether dependencies are consistent
    "tool_version_check",  # Whether tool versions match
    "expiry_check",        # Whether cache entry has not expired
    "corruption_detected", # Whether any corruption was detected
])

# SecurityAuditInfo provider - comprehensive security audit information
SecurityAuditInfo = provider(fields = [
    "audit_logs",          # List of security audit log files
    "security_reports",    # List of security validation reports
    "tool_validations",    # List of tool integrity validation files
    "target",              # Target being audited
    "timestamp",           # Audit timestamp
    "security_level",      # Security level applied (strict, standard, etc.)
    "sandbox_enabled",     # Whether sandboxing was enabled
])

# SandboxConfigInfo provider - sandbox configuration information
SandboxConfigInfo = provider(fields = [
    "network_allowed",     # Whether network access is allowed
    "max_memory_mb",       # Maximum memory limit in MB
    "max_cpu_time_seconds", # Maximum CPU time in seconds
    "max_processes",       # Maximum number of processes
    "read_only_paths",     # List of read-only path patterns
    "write_paths",         # List of writable path patterns
    "allowed_env_vars",    # List of allowed environment variables
])

# SecurityReportInfo provider - security validation report
SecurityReportInfo = provider(fields = [
    "language",            # Target language analyzed
    "generated_files",     # Files that were analyzed
    "vulnerabilities",     # List of security vulnerabilities found
    "warnings",            # List of security warnings
    "passed",              # Boolean indicating if security check passed
    "scan_timestamp",      # When the security scan was performed
    "scanner_version",     # Version of security scanner used
])

# ToolIntegrityInfo provider - tool integrity validation information
ToolIntegrityInfo = provider(fields = [
    "tool_path",           # Path to the validated tool
    "expected_checksum",   # Expected SHA256 checksum
    "actual_checksum",     # Actual SHA256 checksum
    "validation_passed",   # Whether validation passed
    "validation_time",     # When validation was performed
    "tool_version",        # Version of the tool validated
])

# PerformanceInfo provider - performance optimization results
PerformanceInfo = provider(fields = [
    "compilation_time_ms", # Total compilation time in milliseconds
    "memory_peak_mb",      # Peak memory usage in megabytes
    "cpu_utilization",     # CPU utilization percentage
    "cache_hit_rate",      # Cache hit rate percentage
    "parallel_efficiency", # Parallel execution efficiency
    "strategy_used",       # Compilation strategy used
    "artifacts",           # Generated artifacts
    "performance_metrics", # Detailed performance metrics
])

# PerformanceMetricsInfo provider - detailed performance metrics
PerformanceMetricsInfo = provider(fields = [
    "compilation_time_ms", # Compilation time in milliseconds
    "memory_peak_mb",      # Peak memory usage in megabytes
    "cpu_utilization",     # CPU utilization percentage
    "cache_hit_rate",      # Cache hit rate percentage
    "parallel_efficiency", # Parallel execution efficiency
    "files_processed",     # Number of files processed
    "strategy_used",       # Strategy used for compilation
])

# Buf-specific providers

# BufLintInfo provider - buf lint operation results
BufLintInfo = provider(fields = [
    "lint_report",         # JSON lint report from buf lint
    "violations",          # List of lint violations found
    "passed",              # Boolean indicating if linting passed
    "config_used",         # Configuration that was used for linting
    "files_linted",        # List of files that were linted
    "lint_time_ms",        # Time taken for linting in milliseconds
    "rules_applied",       # List of lint rules that were applied
    "error_count",         # Number of lint errors found
    "warning_count",       # Number of lint warnings found
])

# BufFormatInfo provider - buf format operation results
BufFormatInfo = provider(fields = [
    "formatted_files",     # List of formatted file outputs
    "diff_report",         # Diff report showing formatting changes
    "needs_formatting",    # Boolean indicating if files need formatting
    "files_processed",     # List of files that were processed
    "format_time_ms",      # Time taken for formatting in milliseconds
    "changes_made",        # Number of formatting changes made
    "diff_output",         # Raw diff output from buf format --diff
])

# BufBreakingInfo provider - buf breaking change detection results
BufBreakingInfo = provider(fields = [
    "breaking_report",     # JSON breaking change report from buf breaking
    "violations",          # List of breaking changes found
    "passed",              # Boolean indicating if breaking change check passed
    "baseline_used",       # Baseline that was compared against
    "config_used",         # Configuration that was used for detection
    "files_checked",       # List of files that were checked
    "check_time_ms",       # Time taken for breaking change check in milliseconds
    "rules_applied",       # List of breaking change rules that were applied
    "breaking_count",      # Number of breaking changes found
])

# BufToolchainInfo provider - buf CLI toolchain information
BufToolchainInfo = provider(fields = [
    "buf_cli",             # Path to buf CLI binary
    "version",             # Version of buf CLI
    "platform",            # Platform (e.g., "linux-x86_64")
    "download_method",     # How the CLI was obtained (oras, http, etc.)
    "cache_path",          # Path where CLI is cached
    "checksum_verified",   # Whether the CLI checksum was verified
])

# Governance and review workflow providers

# SchemaReviewInfo provider - schema review workflow information
SchemaReviewInfo = provider(
    doc = "Information about schema review workflow configuration",
    fields = {
        "proto": "Proto library under review",
        "reviewers": "Required reviewers (teams/users)",
        "approval_count": "Number of approvals required", 
        "config_file": "Review configuration file",
        "review_script": "Review workflow execution script",
        "auto_approve_minor": "Whether to auto-approve minor changes",
    }
)

# BreakingChangeInfo provider - breaking change detection information
BreakingChangeInfo = provider(
    doc = "Information about breaking change detection configuration",
    fields = {
        "proto": "Proto library being checked",
        "against_repository": "Repository to compare against",
        "against_tag": "Tag/commit to compare against",
        "breaking_policy": "Policy for handling breaking changes",
        "config_file": "Breaking change configuration file",
        "breaking_script": "Breaking change check script",
    }
)

# GovernancePolicyInfo provider - governance policy configuration
GovernancePolicyInfo = provider(
    doc = "Information about governance policy configuration",
    fields = {
        "config_file": "Governance configuration file path",
        "teams": "Team-specific policy configurations",
        "repositories": "Repository-specific policy configurations", 
        "global_settings": "Global governance settings",
        "policy_config_file": "Generated policy configuration file",
    }
)

# AuditTrailInfo provider - audit trail information
AuditTrailInfo = provider(
    doc = "Information about audit trail configuration and records",
    fields = {
        "audit_records": "List of audit record files",
        "audit_config": "Audit configuration",
        "storage_backend": "Audit trail storage backend",
        "retention_policy": "Audit record retention policy",
    }
)

# TeamCollaborationInfo provider - team collaboration configuration
TeamCollaborationInfo = provider(
    doc = "Information about team collaboration configuration",
    fields = {
        "team": "Team name",
        "collaboration_config": "Team collaboration configuration",
        "shared_resources": "Shared team resources",
        "permission_matrix": "Team permission matrix",
    }
)

# ComplianceReportInfo provider - compliance reporting information
ComplianceReportInfo = provider(
    doc = "Information about compliance reports and metrics",
    fields = {
        "report_type": "Type of compliance report",
        "report_file": "Generated compliance report file",
        "coverage": "Compliance coverage metrics",
        "violations": "List of compliance violations",
    }
)
