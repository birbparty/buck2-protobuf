"""Provider definitions for protobuf Buck2 integration.

This module defines the providers used to pass information between protobuf
rules. Implementation will be completed in Task 002.
"""

# ProtoInfo provider - will be fully implemented in Task 002
ProtoInfo = provider(fields = [
    "descriptor_set",        # Compiled protobuf descriptor set
    "proto_files",          # Source .proto files
    "import_paths",         # Import paths for this library
    "transitive_descriptor_sets",  # All descriptor sets from deps
    "transitive_proto_files",      # All proto files from deps
    "transitive_import_paths",     # All import paths from deps
    "go_package",           # Go package path (if specified)
    "python_package",       # Python package path (if specified)
    "java_package",         # Java package path (if specified)
    "lint_report",          # Lint validation report
    "breaking_report",      # Breaking change report
])

# LanguageProtoInfo provider - will be implemented across language tasks
LanguageProtoInfo = provider(fields = [
    "language",             # Target language ("go", "python", etc.)
    "generated_files",      # Generated source files
    "package_name",         # Language-specific package name
    "dependencies",         # Language-specific dependencies
    "compiler_flags",       # Language-specific compiler flags
])

# ProtoBundleInfo provider - information about multi-language bundles
ProtoBundleInfo = provider(fields = [
    "bundle_name",          # Name of the bundle
    "proto_target",         # Original proto_library target
    "language_targets",     # Dictionary of language -> target info
    "generated_languages",  # List of languages that were generated
    "consistency_report",   # Cross-language consistency validation report
    "bundle_config",        # Bundle configuration used
])

# GrpcServiceInfo provider - advanced gRPC service information
GrpcServiceInfo = provider(fields = [
    "service_name",         # Name of the gRPC service
    "proto_target",         # Proto library containing service definitions
    "languages",            # List of target languages
    "plugins",              # Dictionary of enabled plugins and their config
    "gateway_files",        # gRPC-Gateway generated files (if enabled)
    "openapi_files",        # OpenAPI/Swagger files (if enabled)
    "validation_files",     # Validation plugin files (if enabled)
    "mock_files",           # Mock implementation files (if enabled)
    "service_config",       # Service-specific configuration
])

# PluginInfo provider - information about plugin execution
PluginInfo = provider(fields = [
    "plugin_name",          # Name of the plugin
    "target_language",      # Language this plugin targets
    "generated_files",      # Files generated by this plugin
    "dependencies",         # Additional dependencies required
    "metadata",             # Plugin-specific metadata
])

# ConsistencyReport provider - cross-language validation results
ConsistencyReport = provider(fields = [
    "bundle_name",          # Bundle being validated
    "languages",            # Languages included in validation
    "api_consistency",      # API surface consistency results
    "naming_consistency",   # Naming convention consistency results
    "type_compatibility",   # Type compatibility results
    "validation_errors",    # List of validation errors found
    "validation_warnings",  # List of validation warnings
    "is_valid",             # Boolean indicating if validation passed
])
